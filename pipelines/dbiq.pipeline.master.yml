# Flutter build
name: $(Date:yyyyMMdd)$(Rev:r)
variables:
  - group: 'MyAppSecrets'
  - name : 'projectDirectory'
    value: ''
trigger:
- master*
pr:
- master
jobs:
  - job: BuildAndroid
    displayName: ANDROID
    pool:
      vmImage: 'macOS-latest'
    steps:
    - task: FlutterInstall@0
      inputs:
        channel: 'stable'
        version: 'latest'
    - task: FlutterBuild@0
      inputs:
        target: apk
        projectDirectory: $(projectDirectory)
    - script: pipelines/scripts.sh start_android_emulator
      displayName: 'Start android emulator'
    - task: FlutterCommand@0
      displayName: 'Run Widget tests'
      inputs:
        arguments: 'test'
    - task: FlutterCommand@0
      displayName: 'Run Integration tests'
      env:
        tags: $(tags)
      inputs:
        arguments: 'drive --target=test_driver/app.dart'
      continueOnError: true
    - script: pipelines/scripts.sh generate_test_report
      displayName: 'Generate report'

    - publish: $(System.DefaultWorkingDirectory)/test_driver/reports
      displayName: 'Saving reports'
      artifact: reports_android
    - task: AndroidSigning@3
      displayName: 'Signing and aligning APK file(s) **/*.apk'
      inputs:
        apkFiles: '$(Build.Repository.LocalPath)/build/app/outputs/apk/release/*.apk'
        apksignerKeystoreFile: 'key.jks'
        apksign: true
        apksignerKeystorePassword: $(keypassword)
        apksignerKeystoreAlias: $(key)
        apksignerKeyPassword: $(keypassword)
    - task: CopyFiles@2
      inputs:
        contents: '$(Build.Repository.LocalPath)/build/app/outputs/apk/release/*.apk'
        targetFolder: '$(build.artifactStagingDirectory)/android'
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'drop'
        
  - job: BuildIOS
    displayName: IOS
    pool:
      vmImage: 'macOS-latest'
    steps:
      - task: InstallAppleCertificate@2
        displayName: Install Apple distribution certificate
        inputs:
          certSecureFile: 'my_cert.p12'
          certPwd: '$(iosP12password)'
          keychain: 'temp'
      - task: InstallAppleProvisioningProfile@1
        displayName: Install ad-hoc distribution profile
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'BlueSky_InHouse_Certificate.mobileprovision'
      # - task: DownloadSecureFile@1
      #   displayName: Get GoogleService-Info.plist
      #   name: googleServicesInfoPlist
      #   inputs:
      #     secureFile: 'GoogleService-Info.plist'
      # - pwsh: Move-Item $(googleServicesInfoPlist.secureFilePath) ios/Runner/ -Force
      #   displayName: Override GoogleService-Info.plist
      - task: FlutterInstall@0
        displayName: Install Flutter
        inputs:
          channel: 'stable'
          version: 'latest'
      - task: FlutterBuild@0
        displayName: Build app
        inputs:
          target: 'ios'
          projectDirectory: '.'
          buildName: '$(Build.BuildNumber)'
          iosCodesign: false
      - script: pipelines/scripts.sh start_iOS_simulator 'iPhone 8'
        displayName: 'Start iOS simulator'
      - task: FlutterCommand@0
        displayName: 'Run Widget tests'
        inputs:
          arguments: 'test'
      - task: FlutterCommand@0
        displayName: 'Run Integration tests'
        env:
          tags: $(tags)
        inputs:
          arguments: 'drive --target=test_driver/app.dart'
        continueOnError: true
      - script: pipelines/scripts.sh generate_test_report
        displayName: 'Generate report'
      - publish: $(System.DefaultWorkingDirectory)/test_driver/reports
        displayName: 'Saving reports'
        artifact: reports_ios
      - task: Xcode@5
        displayName: Package and sign app
        inputs:
          actions: 'build'
          configuration: 'Release'
          sdk: 'iphoneos'
          xcWorkspacePath: 'ios/Runner.xcworkspace'
          scheme: 'Runner'
          packageApp: true
          # exportPath: '$(System.ArtifactsDirectory)'
          # exportOptions: 'plist'
          # exportMethod: 'development'
          # exportOptionsPlist: 'ios/exportOptions.plist'
          signingOption: 'manual'
          signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
          provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
      - task: CopyFiles@2
        inputs:
          contents: '$(Build.Repository.LocalPath)/**/*.ipa'
          targetFolder: '$(build.artifactStagingDirectory)/ios'
      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'drop'
